// 2TODO.txt			//Descriptive file of what to do next.
use an unique identifier to link list items to a fuller description
When things have been done move them to 3Done.txt

***********TODO LIST **********[done] (@who)   @where:what (how) ***************************

    []  Study the best implementation for 'Main_Loop2' exchanging data with remote client (see Roadmap)
    []  FC_RT210128  Make/maintain a list of libraries to install on Arduino
  
 	  []  fix popup.mSettings() - check idPopUp - Shoud allow for editing the currently selected element/widget
		[]  fix the varsettings.html so it can be used for editing the protocol elements and widgets

		[]  todo: TodoProtocols let prot be an array, so we can connect more devices. E.g. prot[0] could be MeCFES1 and prot[1] eglove etc.
    []  todo8: move 'init_SetupFromServer' into a 'server' structure
    []  @JS - [settings] panel : list the current IP above [Set IP address]

****  Deferred TODOS (Todo later)
[]  todo4: solve issue of protocol completion iss210128 &   @JS -validate() see:iss201125 maybe its more useful to know the number of invalid elements in the protocol. An element could be invalid but reserve space for another device/FW?



*******************     DESCRIPTION OF TODO ITEMS           *******************

isBTConnected: boolean that to switch WiFI/BT in CPP
  mSwitch2BT:
    mSetRFMethod(boolean)  //True=BT   false=WiFi
    a method that True: initializes bluetooth  False: initializes WiFi
    mSetRFMethod please fix:return InitBLE(); so it returns true on success
    <===>JS:bUseBluetooth
    JS BT callgraph: isWebBluetoothEnabled
TodoProtocols{
	let prot be an array, so we can connect more devices. E.g. prot[0] could be MeCFES1 and prot[1] eglove etc.
	oaProtocols = new cProtocol3[nDevices];


}
</p>
Functionalities to port from old Conversion
		[]	set a value by texinput box former. oUInput.mInputValue1
		[]	resizing panels  former. nPanelSizes
  	[]	blanking slider (horizontal) former
		[]	select other signal panels swiping forward backward to see filtered emg etc
		[]	Show Data - grid of datavalues that can be editied (optional)
		[]	"Set Device Mode" former   mBitFields_Show(); for starting stopping devices,modes, filter selection etc
		[]	mPrivileges select usermodes eg therapist, expert, administrator of setup
		[]	mSettingsDialog selecting active devices setupfiles, save datafiles bluetooth connection etc
		[]	mShowAbout - information
		[]	zoom: mZoom
		[]	scaling mScaleMaxStr
		[]	mAutoRange
note: bitfields - a 32 bit word is used for flags.
nMode.all_flags see GlobalData.h in firmware:https://docs.google.com/document/d/1afB7kv-D1lDcdTOnBufZNtuWIsrhLKDh6-ncjtmigwg/edit#bookmark=id.ezryzccd8h0u

=========== REFACTORING ===============
prot.oData<===Widget

Refactoring ideas:{
	Modularity or Keeping functionalities separate.
	2. DRY -> Donâ€™t Repeat Yourself
  Extract Function {
    Create a new function and name it for what it does.
    function x(){
     dosomething()
     -....
     function dosomething(){}
    }
  }
  Prefer Parameter Object
  {
      function fun(x,y)
      function fun(yxobj)
  }

	Codestyle
	    I prefer sCamelCase style with cMyClass, sString, nNumeber, oObject, eEnum


}


/*
ToDo list
see also:https://docs.google.com/document/d/1asDIyJUQyjWTWjn_OsVVbzIX3uRCjsKy1ccvBksbU9g/edit#heading=h.qsk0jinrkh64


ISSUES
  iss210128: when initializing the protocol the mRX_ProtInit is called for each element
      how do we know when the last element has been reached?


BT integration
in transmit.cpp
if(globalClient != NULL && globalClient->status() == WS_CONNECTED){
add a similar structure in case of BT transfer
mReceive2



FLOW INO
ARDUINO-loop->
    *->mCommunication
          *-->mDeSerializeRX
                *---->Expose2Protocol  (initializes the protocol)

    *-->mSendToClient : send buffer data to client





publishvar.c      is where variables are inserted for publication



{}

**********************+       descriptions        ***************************

BT210126  switching protocok between BT/WiFi RFmode:
        1) cosider_ havign a special magic constant in the protocok like kHandshake coding for a special action defined by the payload
        2) alternatively - using a variable in the protocol to code for the RFmode
        For both consider that the protocol should be able to be transparent to a device, that is carrying an address for subsequent commands
          the modes are
            RFmode    = BT / WiFi   /  (Direct Wifi SoftAP)
            Target    = ESP32   /   LM_2018     maybe different devices

----------------------------------------------
